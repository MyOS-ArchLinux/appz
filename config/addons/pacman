#!/usr/bin/env bash
APPZ_MNGR_VERSION="0.0.1"
APPZ_MNGR_NAME="pacman"

pacman_mirrorlist="${APPZ_CACHE_DIR:?}/pacman_mirrorlist"

appz_list(){
	local selected_app=$(pacman -Qnq | fzf -i -e -m --preview 'pacman -Qil {}' --layout=reverse -q "${*:-}" )
	[ -z "$selected_app" ] && return 0
	pacman -Si "$selected_app"
	_prompt "do you wanna uninstall $selected_app ?" && sudo pacman -Rs "$selected_app"
}

appz_search(){
	local selected_app=$(pacman -Ssq | fzf -i -e -m --preview 'pacman -Si {}' --layout=reverse -q "${*:-}" )
	[ -z "$selected_app" ] && return 0
	pacman -Si "$selected_app"
	_prompt "do you wanna install $selected_app ?" && sudo pacman -S "$selected_app"
}

appz_install() {
	case "$@" in
		*.pkg.*)
			printf '\033[1;33m%s \033[0m\n' "-> Installing a pre-built binarie $*: "
			sudo pacman -U "$@"
			;;
		*)
			if [ ! -n "$2" ]; then
				local selected_app=$(pacman -Ssq | fzf -i -e --preview 'pacman -Si {}' --layout=reverse -q "${*:-}" --select-1)
				[ -z "$selected_app" ] && return 0
				echo "installing $selected_app : "
				sudo pacman -S "$selected_app"
			else
				sudo pacman -S "$@"
			fi
	esac
}

appz_update_pacman_mirrorlist(){
	reflector --verbose --protocol https --latest 10 --sort rate --save "${pacman_mirrorlist:?}" || { prnt_err "error to get update mirrors list" ;return 1 ; }
	echo "#\n" >> "${pacman_mirrorlist:?}"
	reflector --country Spain,Germany,France,Sweden,Netherlands --protocol https --latest 40 >> "${pacman_mirrorlist:?}" || { prnt_err "error to get update mirrors list" ;return 1 ; }
	awk ' !x[$0]++' "${pacman_mirrorlist:?}" > "${pacman_mirrorlist:?}_new"
	_prompt "do you want to save mirror list" || { echo "skipped update mirrors"; return 0; }
	sudo mv -f -v "${pacman_mirrorlist:?}_new" /etc/pacman.d/mirrorlist
}

appz_update(){
	if ! is_file_uptodate "${pacman_mirrorlist:?}"; then
		_prompt "do you want to update pacman mirror list" && \
		appz_update_pacman_mirrorlist || \
		rm -fr "${pacman_mirrorlist:?}"
	fi
	echo ":: checking for new updates"
	if [ "${APPZ_FORCE_ACT:?}" == true ] ; then
		sudo pacman -Syy;
	else
		sudo pacman -Sy;
	fi

	if pacman -Qu | grep -v "\[ignored\]" -q; then
		notify-send "🎁 apps" "New updates available."
		printf -- '\033[1;32m%s \033[0m\n' "-> New updates available."
		pacman -Qu;
	else
		notify-send "📦 apps" "Sync complete. No new packages for update."
		printf -- '\033[1;31m%s \033[0m\n' "-> Sync complete. No new packages for update."
	fi
}

appz_upgrade(){
	sudo pacman -Syu
}

appz_show(){
	pacman -Si $1
}

appz_remove(){
	if [ ! -n "$2" ]; then
		local selected_app=$(pacman -Qnq | fzf -i -e --preview 'pacman -Qil {}' --layout=reverse -q "${*:-}" --select-1)
		[ -z "$selected_app" ] && return 0
		echo "uninstalling $selected_app : "
		sudo pacman -Rs "$selected_app"
	else
		sudo pacman -Rs "$@"
	fi
}

appz_has(){
	while [ "$1" ]; do
		if $(pacman -Qnq $1 >/dev/null 2>&1); then
			printf ' %s \033[32;1m\t%s \033[0m\n' "- $1" "installed"
		elif $(pacman -Ssq "^$1" >/dev/null 2>&1); then
			printf ' %s \033[31;1m\t%s \033[0m\n' "- $1" "not installed"
		else
			printf ' %s \033[31;1m\t%s \033[0m\n' "- $1" "not available in pacman"
		fi
		shift
	done
}

appz_clean(){
	sudo pacman -Rns $(pacman -Qtdq)
	sudo pacman -Sc
}

appz_count(){
	pacman -Qq | tot
}
